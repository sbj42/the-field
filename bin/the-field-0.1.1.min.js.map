{"version":3,"sources":["webpack:///the-field-0.1.1.min.js","webpack:///webpack/bootstrap c39273853d88b0b34d6f","webpack:///./src/geom/index.ts","webpack:///./src/field-of-view.ts","webpack:///./src/geom/mask-rect.ts","webpack:///./src/geom/mask.ts","webpack:///./src/geom/offset.ts","webpack:///./src/geom/rectangle.ts","webpack:///./src/geom/size.ts","webpack:///./src/index.ts"],"names":["TheField","modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__export","cutWedge","wedges","wedgeIndex","low","high","length","WEDGE_HIGH","WEDGE_COUNT","WEDGE_LOW","splice","geom","LOCAL_OFF","Offset","FieldOfViewMap","width","height","this","_size","Size","set","_tileFlags","Array","area","fill","addBody","x","y","index","removeBody","getBody","getFieldOfView","chebyshevRadius","origin","boundRect","Rectangle","mask","MaskRect","_quadrant","xDir","yDir","startX","startY","endDX","Math","min","max","endDY","startMapIndex","startMaskIndex","Number","POSITIVE_INFINITY","dy","yMapIndex","yMaskIndex","divYpos","divYneg","dx","mapIndex","maskIndex","slopeY","slopeX","setAt","body","rect","initialValue","outsideValue","_rectangle","copyFrom","_mask","Mask","_outsideValue","toString","northWest","westX","northY","off","subtractOffset","getAt","containsOffset","forEach","cursor","callback","_this","addOffset","size","_bits","ret","other","empty","field_of_view_1","geom_1"],"mappings":"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","file":"the-field-0.1.1.min.js","sourcesContent":["var TheField =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/bin/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 7);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(4));\r\n__export(__webpack_require__(6));\r\n__export(__webpack_require__(5));\r\n__export(__webpack_require__(3));\r\n__export(__webpack_require__(2));\r\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar geom = __webpack_require__(0);\r\n// tslint:disable:no-bitwise\r\n/**\r\n * In the shadowcasting algorithm, each shadow is represented by a \"wedge\",\r\n * running from a \"low\" angle to a \"high\" angle.  The wedges are all stored in\r\n * a simple number array, with two numbers for each wedge.  These constants\r\n * (WEDGE_LOW and WEDGE_HIGH) help to identify which number is which.\r\n * WEDGE_COUNT is just how many numbers per wedge.\r\n */\r\nvar WEDGE_LOW = 0;\r\nvar WEDGE_HIGH = 1;\r\nvar WEDGE_COUNT = 2;\r\n/**\r\n * Bodies in this algorithm do not entirely fill their tiles.  This is\r\n * implemented by adjusting the angles of the shadows the bodies cast,\r\n * making the wedge very slightly narrower.  BODY_EPSILON represents the\r\n * amount of reduction on either side of the wedge.\r\n */\r\nvar BODY_EPSILON = 0.00001;\r\n/**\r\n * We avoid heap allocations during the core part of the algorithm by using this\r\n * preallocated offset object.\r\n */\r\nvar LOCAL_OFF = new geom.Offset();\r\n/**\r\n * The FieldOFViewMap represents the map over which the field of view will be\r\n * computed.  It starts out empty.  You can add walls and bodies to it, and then\r\n * use getFieldOfView() to compute the field of view from a given point.\r\n */\r\nvar FieldOfViewMap = /** @class */ (function () {\r\n    function FieldOfViewMap(width, height) {\r\n        this._size = new geom.Size();\r\n        this._size.set(width, height);\r\n        this._tileFlags = new Array(this._size.area).fill(false);\r\n    }\r\n    // setup and maintenance\r\n    FieldOfViewMap.prototype.addBody = function (x, y) {\r\n        LOCAL_OFF.set(x, y);\r\n        var index = this._size.index(LOCAL_OFF);\r\n        this._tileFlags[index] = true;\r\n    };\r\n    FieldOfViewMap.prototype.removeBody = function (x, y) {\r\n        LOCAL_OFF.set(x, y);\r\n        var index = this._size.index(LOCAL_OFF);\r\n        this._tileFlags[index] = false;\r\n    };\r\n    FieldOfViewMap.prototype.getBody = function (x, y) {\r\n        LOCAL_OFF.set(x, y);\r\n        var index = this._size.index(LOCAL_OFF);\r\n        return this._tileFlags[index];\r\n    };\r\n    // execution\r\n    /**\r\n     * Compute the field of view for a camera at the given tile.\r\n     * chebyshevRadius is the vision radius.  It uses chebyshev distance\r\n     * (https://en.wikipedia.org/wiki/Chebyshev_distance), which just means\r\n     * that the limit of vision in a large empty field will be square.\r\n     *\r\n     * This returns a MaskRect, which indicates which tiles are visible.\r\n     * maskRect.get(x, y) will return true for visible tiles.\r\n     */\r\n    FieldOfViewMap.prototype.getFieldOfView = function (x, y, chebyshevRadius) {\r\n        var origin = new geom.Offset(x, y);\r\n        var boundRect = new geom.Rectangle(origin.x - chebyshevRadius, origin.y - chebyshevRadius, chebyshevRadius * 2 + 1, chebyshevRadius * 2 + 1);\r\n        var mask = new geom.MaskRect(boundRect);\r\n        // the player can always see itself\r\n        mask.set(origin, true);\r\n        // the field is divided into quadrants\r\n        this._quadrant(mask, origin, chebyshevRadius, -1, -1);\r\n        this._quadrant(mask, origin, chebyshevRadius, 1, -1);\r\n        this._quadrant(mask, origin, chebyshevRadius, -1, 1);\r\n        this._quadrant(mask, origin, chebyshevRadius, 1, 1);\r\n        return mask;\r\n    };\r\n    FieldOfViewMap.prototype._quadrant = function (mask, origin, chebyshevRadius, xDir, yDir) {\r\n        var startX = origin.x, startY = origin.y;\r\n        var endDX = (Math.min(Math.max(startX + xDir * (chebyshevRadius + 1), -1), this._size.width) - startX) * xDir;\r\n        var endDY = (Math.min(Math.max(startY + yDir * (chebyshevRadius + 1), -1), this._size.height) - startY) * yDir;\r\n        if (endDX < 0 || endDY < 0) {\r\n            // the origin is outside of the map\r\n            return;\r\n        }\r\n        var startMapIndex = this._size.index(origin);\r\n        var startMaskIndex = mask.index(origin);\r\n        // Initial wedge is from slope zero to slope infinity (i.e. the whole quadrant)\r\n        var wedges = [0, Number.POSITIVE_INFINITY];\r\n        // X += Y must be written as X = X + Y, in order not to trigger deoptimization due to\r\n        // http://stackoverflow.com/questions/34595356/what-does-compound-let-const-assignment-mean\r\n        for (var dy = 0, yMapIndex = startMapIndex, yMaskIndex = startMaskIndex; dy !== endDY && wedges.length > 0; dy++, yMapIndex = yMapIndex + yDir * this._size.width, yMaskIndex = yMaskIndex + yDir * mask.width) {\r\n            var divYpos = 1 / (dy + 0.5);\r\n            var divYneg = dy === 0 ? Number.POSITIVE_INFINITY : 1 / (dy - 0.5);\r\n            var wedgeIndex = 0;\r\n            // X += Y must be written as X = X + Y, in order not to trigger deoptimization due to\r\n            // http://stackoverflow.com/questions/34595356/what-does-compound-let-const-assignment-mean\r\n            for (var dx = 0, mapIndex = yMapIndex, maskIndex = yMaskIndex, slopeY = -0.5 * divYpos, slopeX = 0.5 * divYneg; dx !== endDX && wedgeIndex !== wedges.length; dx++, mapIndex = mapIndex + xDir, maskIndex = maskIndex + xDir,\r\n                slopeY = slopeY + divYpos, slopeX = slopeX + divYneg) {\r\n                // the slopes of the four corners of this tile\r\n                // these are named as follows:\r\n                //   slopeY is the slope closest to the Y axis\r\n                //   slopeX is the slope closest to the X axis\r\n                // this is always true:\r\n                //   slopeY < slopeX\r\n                //\r\n                // O = origin, C = current\r\n                // +---+---+---+\r\n                // | O |   |   |\r\n                // +---+---+---X\r\n                // |   |   | C |\r\n                // +---+---Y---+\r\n                // advance the wedge index until this tile is not after the current wedge\r\n                while (slopeY >= wedges[wedgeIndex + WEDGE_HIGH]) {\r\n                    // X += Y must be written as X = X + Y, in order not to trigger deoptimization due to\r\n                    // http://stackoverflow.com/questions/34595356/what-does-compound-let-const-assignment-mean\r\n                    wedgeIndex = wedgeIndex + WEDGE_COUNT;\r\n                    if (wedgeIndex >= wedges.length) {\r\n                        break;\r\n                    }\r\n                }\r\n                if (wedgeIndex >= wedges.length) {\r\n                    break;\r\n                }\r\n                // if the current wedge is after this tile, move on\r\n                if (slopeX <= wedges[wedgeIndex + WEDGE_LOW]) {\r\n                    continue;\r\n                }\r\n                // we can see this tile\r\n                mask.setAt(maskIndex, true);\r\n                // const/let must be at the top of a block, in order not to trigger deoptimization due to\r\n                // https://github.com/nodejs/node/issues/9729\r\n                {\r\n                    var body = (dx !== 0 || dy !== 0) && this._tileFlags[mapIndex];\r\n                    if (body) {\r\n                        wedgeIndex = cutWedge(wedges, wedgeIndex, slopeY + BODY_EPSILON, slopeX - BODY_EPSILON);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    return FieldOfViewMap;\r\n}());\r\nexports.FieldOfViewMap = FieldOfViewMap;\r\n/**\r\n * This function cuts a range of angles out of the wedge array.\r\n */\r\nfunction cutWedge(wedges, wedgeIndex, low, high) {\r\n    for (;;) {\r\n        if (wedgeIndex === wedges.length) {\r\n            return wedgeIndex;\r\n        }\r\n        if (low <= wedges[wedgeIndex + WEDGE_HIGH]) {\r\n            break;\r\n        }\r\n        wedgeIndex += WEDGE_COUNT;\r\n    }\r\n    if (low <= wedges[wedgeIndex + WEDGE_LOW]) {\r\n        if (high >= wedges[wedgeIndex + WEDGE_HIGH]) {\r\n            // wedge is entirely occluded, remove it\r\n            wedges.splice(wedgeIndex, WEDGE_COUNT);\r\n            // now looking at the next wedge (or past the end)\r\n            return cutWedge(wedges, wedgeIndex, low, high);\r\n        }\r\n        else if (high >= wedges[wedgeIndex + WEDGE_LOW]) {\r\n            // low part of wedge is occluded, trim it\r\n            wedges[wedgeIndex + WEDGE_LOW] = high;\r\n            // still looking at the same wedge\r\n        }\r\n        else {\r\n            // this cut doesn't reach the current wedge\r\n        }\r\n    }\r\n    else if (high >= wedges[wedgeIndex + WEDGE_HIGH]) {\r\n        // high part of wedge is occluded, trim it\r\n        wedges[wedgeIndex + WEDGE_HIGH] = low;\r\n        // move on to the next wedge\r\n        wedgeIndex += WEDGE_COUNT;\r\n        return cutWedge(wedges, wedgeIndex, low, high);\r\n    }\r\n    else {\r\n        // middle part of wedge is occluded, split it\r\n        wedges.splice(wedgeIndex, 0, wedges[wedgeIndex + WEDGE_LOW], low);\r\n        wedgeIndex += WEDGE_COUNT;\r\n        wedges[wedgeIndex + WEDGE_LOW] = high;\r\n        // now looking at the second wedge of the split\r\n    }\r\n    return wedgeIndex;\r\n}\r\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar geom = __webpack_require__(0);\r\nvar LOCAL_OFF = new geom.Offset();\r\nvar MaskRect = /** @class */ (function () {\r\n    function MaskRect(rect, initialValue, outsideValue) {\r\n        if (initialValue === void 0) { initialValue = false; }\r\n        if (outsideValue === void 0) { outsideValue = false; }\r\n        this._rectangle = new geom.Rectangle();\r\n        this._rectangle.copyFrom(rect);\r\n        this._mask = new geom.Mask(rect, initialValue);\r\n        this._outsideValue = outsideValue;\r\n    }\r\n    // accessors\r\n    MaskRect.prototype.toString = function () {\r\n        return this._rectangle.northWest + \"/\" + this._outsideValue + \"\\n\" + this._mask;\r\n    };\r\n    Object.defineProperty(MaskRect.prototype, \"westX\", {\r\n        get: function () {\r\n            return this._rectangle.westX;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MaskRect.prototype, \"northY\", {\r\n        get: function () {\r\n            return this._rectangle.northY;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MaskRect.prototype, \"width\", {\r\n        get: function () {\r\n            return this._rectangle.width;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MaskRect.prototype, \"height\", {\r\n        get: function () {\r\n            return this._rectangle.height;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    MaskRect.prototype.index = function (off) {\r\n        return this._mask.index(LOCAL_OFF.copyFrom(off).subtractOffset(this._rectangle.northWest));\r\n    };\r\n    MaskRect.prototype.getAt = function (index) {\r\n        return this._mask.getAt(index);\r\n    };\r\n    MaskRect.prototype.get = function (x, y) {\r\n        LOCAL_OFF.set(x, y);\r\n        if (!this._rectangle.containsOffset(LOCAL_OFF)) {\r\n            return this._outsideValue;\r\n        }\r\n        return this._mask.get(LOCAL_OFF.subtractOffset(this._rectangle.northWest));\r\n    };\r\n    // mutators\r\n    MaskRect.prototype.setAt = function (index, value) {\r\n        this._mask.setAt(index, value);\r\n        return this;\r\n    };\r\n    MaskRect.prototype.set = function (off, value) {\r\n        this._mask.set(LOCAL_OFF.copyFrom(off).subtractOffset(this._rectangle.northWest), value);\r\n        return this;\r\n    };\r\n    // utilities\r\n    MaskRect.prototype.forEach = function (cursor, callback) {\r\n        var _this = this;\r\n        this._mask.forEach(cursor, function (off, value) {\r\n            callback(off.addOffset(_this._rectangle.northWest), value);\r\n        });\r\n    };\r\n    return MaskRect;\r\n}());\r\nexports.MaskRect = MaskRect;\r\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar geom = __webpack_require__(0);\r\nvar Mask = /** @class */ (function () {\r\n    // TODO consider Uint8Array for bits\r\n    function Mask(size, initialValue) {\r\n        if (initialValue === void 0) { initialValue = false; }\r\n        this._size = new geom.Size();\r\n        this._size.copyFrom(size);\r\n        this._bits = new Array(this._size.area).fill(initialValue);\r\n    }\r\n    // accessors\r\n    Mask.prototype.toString = function () {\r\n        var ret = '';\r\n        var off = new geom.Offset();\r\n        for (var y = 0; y < this._size.height; y++) {\r\n            for (var x = 0; x < this._size.width; x++) {\r\n                off.set(x, y);\r\n                ret += this.get(off.set(x, y)) ? '☑' : '☐';\r\n            }\r\n            ret += '\\n';\r\n        }\r\n        return ret;\r\n    };\r\n    Object.defineProperty(Mask.prototype, \"width\", {\r\n        get: function () {\r\n            return this._size.width;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Mask.prototype, \"height\", {\r\n        get: function () {\r\n            return this._size.height;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Mask.prototype.index = function (off) {\r\n        return this._size.index(off);\r\n    };\r\n    Mask.prototype.getAt = function (index) {\r\n        return this._bits[index];\r\n    };\r\n    Mask.prototype.get = function (off) {\r\n        return this.getAt(this.index(off));\r\n    };\r\n    // mutators\r\n    Mask.prototype.setAt = function (index, value) {\r\n        this._bits[index] = value;\r\n        return this;\r\n    };\r\n    Mask.prototype.set = function (off, value) {\r\n        return this.setAt(this.index(off), value);\r\n    };\r\n    // utilities\r\n    Mask.prototype.forEach = function (cursor, callback) {\r\n        var _this = this;\r\n        var index = 0;\r\n        this._size.forEach(cursor, function (off) {\r\n            callback(off, _this._bits[index]);\r\n            index++;\r\n        });\r\n    };\r\n    return Mask;\r\n}());\r\nexports.Mask = Mask;\r\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Offset = /** @class */ (function () {\r\n    function Offset(x, y) {\r\n        if (typeof x === 'undefined') {\r\n            x = 0;\r\n        }\r\n        if (typeof y === 'undefined') {\r\n            y = 0;\r\n        }\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    Offset.prototype.toString = function () {\r\n        return \"(\" + this.x + \",\" + this.y + \")\";\r\n    };\r\n    // mutators\r\n    Offset.prototype.set = function (x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n        return this;\r\n    };\r\n    Offset.prototype.copyFrom = function (other) {\r\n        this.x = other.x;\r\n        this.y = other.y;\r\n        return this;\r\n    };\r\n    Offset.prototype.addOffset = function (off) {\r\n        this.x += off.x;\r\n        this.y += off.y;\r\n        return this;\r\n    };\r\n    Offset.prototype.subtractOffset = function (off) {\r\n        this.x -= off.x;\r\n        this.y -= off.y;\r\n        return this;\r\n    };\r\n    return Offset;\r\n}());\r\nexports.Offset = Offset;\r\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar geom = __webpack_require__(0);\r\nvar LOCAL_OFF = new geom.Offset();\r\nvar Rectangle = /** @class */ (function () {\r\n    function Rectangle(westX, northY, width, height) {\r\n        if (typeof westX === 'undefined') {\r\n            westX = 0;\r\n        }\r\n        if (typeof northY === 'undefined') {\r\n            northY = 0;\r\n        }\r\n        if (typeof width === 'undefined') {\r\n            width = 0;\r\n        }\r\n        if (typeof height === 'undefined') {\r\n            height = 0;\r\n        }\r\n        this.northWest = new geom.Offset(westX, northY);\r\n        this.size = new geom.Size(width, height);\r\n    }\r\n    // accessors\r\n    Rectangle.prototype.toString = function () {\r\n        return \"(\" + this.westX + \",\" + this.northY + \" \" + this.width + \"x\" + this.height + \")\";\r\n    };\r\n    Object.defineProperty(Rectangle.prototype, \"northY\", {\r\n        get: function () {\r\n            return this.northWest.y;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Rectangle.prototype, \"southY\", {\r\n        get: function () {\r\n            return this.northWest.y + this.size.height - 1;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Rectangle.prototype, \"westX\", {\r\n        get: function () {\r\n            return this.northWest.x;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Rectangle.prototype, \"eastX\", {\r\n        get: function () {\r\n            return this.northWest.x + this.size.width - 1;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Rectangle.prototype, \"width\", {\r\n        get: function () {\r\n            return this.size.width;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Rectangle.prototype, \"height\", {\r\n        get: function () {\r\n            return this.size.height;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Rectangle.prototype, \"empty\", {\r\n        get: function () {\r\n            return this.size.empty;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Rectangle.prototype, \"area\", {\r\n        get: function () {\r\n            return this.size.area;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    // mutators\r\n    Rectangle.prototype.copyFrom = function (other) {\r\n        this.northWest.set(other.westX, other.northY);\r\n        this.size.set(other.width, other.height);\r\n        return this;\r\n    };\r\n    // utilities\r\n    Rectangle.prototype.containsOffset = function (off) {\r\n        return this.size.containsOffset(LOCAL_OFF.copyFrom(off).subtractOffset(this.northWest));\r\n    };\r\n    Rectangle.prototype.index = function (off) {\r\n        return this.size.index(LOCAL_OFF.copyFrom(off).subtractOffset(this.northWest));\r\n    };\r\n    return Rectangle;\r\n}());\r\nexports.Rectangle = Rectangle;\r\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Size = /** @class */ (function () {\r\n    function Size(width, height) {\r\n        if (typeof width === 'undefined') {\r\n            width = 0;\r\n        }\r\n        if (typeof height === 'undefined') {\r\n            height = 0;\r\n        }\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n    // accessors\r\n    Size.prototype.toString = function () {\r\n        return \"(\" + this.width + \"x\" + this.height + \")\";\r\n    };\r\n    Object.defineProperty(Size.prototype, \"empty\", {\r\n        get: function () {\r\n            return this.width === 0 || this.height === 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Size.prototype, \"area\", {\r\n        get: function () {\r\n            return this.width * this.height;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    // mutators\r\n    Size.prototype.set = function (width, height) {\r\n        this.width = width;\r\n        this.height = height;\r\n        return this;\r\n    };\r\n    Size.prototype.copyFrom = function (other) {\r\n        this.width = other.width;\r\n        this.height = other.height;\r\n        return this;\r\n    };\r\n    // utilities\r\n    Size.prototype.containsOffset = function (off) {\r\n        return off.x >= 0 && off.y >= 0 && off.x < this.width && off.y < this.height;\r\n    };\r\n    Size.prototype.index = function (off) {\r\n        return off.y * this.width + off.x;\r\n    };\r\n    Size.prototype.forEach = function (cursor, callback) {\r\n        for (var dy = 0; dy < this.height; dy++) {\r\n            for (var dx = 0; dx < this.width; dx++) {\r\n                cursor.x = dx;\r\n                cursor.y = dy;\r\n                callback(cursor);\r\n            }\r\n        }\r\n    };\r\n    return Size;\r\n}());\r\nexports.Size = Size;\r\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\n/*\r\n *  TheField\r\n *  github.com/sbj42/the-field\r\n *  James Clark\r\n *  Licensed under the MIT license.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar field_of_view_1 = __webpack_require__(1);\r\nexports.FieldOfViewMap = field_of_view_1.FieldOfViewMap;\r\nvar geom_1 = __webpack_require__(0);\r\nexports.MaskRect = geom_1.MaskRect;\r\n\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// the-field-0.1.1.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/bin/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap c39273853d88b0b34d6f","export * from './offset';\r\nexport * from './size';\r\nexport * from './rectangle';\r\nexport * from './mask';\r\nexport * from './mask-rect';\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/geom/index.ts","import * as geom from './geom';\r\n\r\n// tslint:disable:no-bitwise\r\n\r\n/**\r\n * In the shadowcasting algorithm, each shadow is represented by a \"wedge\",\r\n * running from a \"low\" angle to a \"high\" angle.  The wedges are all stored in\r\n * a simple number array, with two numbers for each wedge.  These constants\r\n * (WEDGE_LOW and WEDGE_HIGH) help to identify which number is which.\r\n * WEDGE_COUNT is just how many numbers per wedge.\r\n */\r\nconst WEDGE_LOW = 0;\r\nconst WEDGE_HIGH = 1;\r\nconst WEDGE_COUNT = 2;\r\n\r\n/**\r\n * Bodies in this algorithm do not entirely fill their tiles.  This is\r\n * implemented by adjusting the angles of the shadows the bodies cast,\r\n * making the wedge very slightly narrower.  BODY_EPSILON represents the\r\n * amount of reduction on either side of the wedge.\r\n */\r\nconst BODY_EPSILON = 0.00001;\r\n\r\n/**\r\n * We avoid heap allocations during the core part of the algorithm by using this\r\n * preallocated offset object.\r\n */\r\nconst LOCAL_OFF = new geom.Offset();\r\n\r\n/**\r\n * The FieldOFViewMap represents the map over which the field of view will be\r\n * computed.  It starts out empty.  You can add walls and bodies to it, and then\r\n * use getFieldOfView() to compute the field of view from a given point.\r\n */\r\nexport class FieldOfViewMap {\r\n    private readonly _size = new geom.Size();\r\n    private readonly _tileFlags: boolean[];\r\n\r\n    constructor(width: number, height: number) {\r\n        this._size.set(width, height);\r\n        this._tileFlags = new Array<boolean>(this._size.area).fill(false);\r\n    }\r\n\r\n    // setup and maintenance\r\n\r\n    addBody(x: number, y: number) {\r\n        LOCAL_OFF.set(x, y);\r\n        const index = this._size.index(LOCAL_OFF);\r\n        this._tileFlags[index] = true;\r\n    }\r\n\r\n    removeBody(x: number, y: number) {\r\n        LOCAL_OFF.set(x, y);\r\n        const index = this._size.index(LOCAL_OFF);\r\n        this._tileFlags[index] = false;\r\n    }\r\n\r\n    getBody(x: number, y: number) {\r\n        LOCAL_OFF.set(x, y);\r\n        const index = this._size.index(LOCAL_OFF);\r\n        return this._tileFlags[index];\r\n    }\r\n\r\n    // execution\r\n\r\n    /**\r\n     * Compute the field of view for a camera at the given tile.\r\n     * chebyshevRadius is the vision radius.  It uses chebyshev distance\r\n     * (https://en.wikipedia.org/wiki/Chebyshev_distance), which just means\r\n     * that the limit of vision in a large empty field will be square.\r\n     *\r\n     * This returns a MaskRect, which indicates which tiles are visible.\r\n     * maskRect.get(x, y) will return true for visible tiles.\r\n     */\r\n    getFieldOfView(x: number, y: number, chebyshevRadius: number): geom.MaskRect {\r\n        const origin = new geom.Offset(x, y);\r\n        const boundRect = new geom.Rectangle(\r\n            origin.x - chebyshevRadius, origin.y - chebyshevRadius,\r\n            chebyshevRadius * 2 + 1, chebyshevRadius * 2 + 1,\r\n        );\r\n        const mask = new geom.MaskRect(boundRect);\r\n        // the player can always see itself\r\n        mask.set(origin, true);\r\n        // the field is divided into quadrants\r\n        this._quadrant(mask, origin, chebyshevRadius, -1, -1);\r\n        this._quadrant(mask, origin, chebyshevRadius,  1, -1);\r\n        this._quadrant(mask, origin, chebyshevRadius, -1,  1);\r\n        this._quadrant(mask, origin, chebyshevRadius,  1,  1);\r\n        return mask;\r\n    }\r\n\r\n    private _quadrant(mask: geom.MaskRect, origin: geom.OffsetLike, chebyshevRadius: number,\r\n                      xDir: number, yDir: number) {\r\n        const {x: startX, y: startY} = origin;\r\n        const endDX = (Math.min(Math.max(startX + xDir * (chebyshevRadius + 1),\r\n                                         -1), this._size.width) - startX) * xDir;\r\n        const endDY = (Math.min(Math.max(startY + yDir * (chebyshevRadius + 1),\r\n                                         -1), this._size.height) - startY) * yDir;\r\n        if (endDX < 0 || endDY < 0) {\r\n            // the origin is outside of the map\r\n            return;\r\n        }\r\n        const startMapIndex = this._size.index(origin);\r\n        const startMaskIndex = mask.index(origin);\r\n        // Initial wedge is from slope zero to slope infinity (i.e. the whole quadrant)\r\n        const wedges = [0, Number.POSITIVE_INFINITY];\r\n        // X += Y must be written as X = X + Y, in order not to trigger deoptimization due to\r\n        // http://stackoverflow.com/questions/34595356/what-does-compound-let-const-assignment-mean\r\n        for (let dy = 0, yMapIndex = startMapIndex, yMaskIndex = startMaskIndex;\r\n             dy !== endDY && wedges.length > 0;\r\n             dy ++, yMapIndex = yMapIndex + yDir * this._size.width, yMaskIndex = yMaskIndex + yDir * mask.width\r\n        ) {\r\n            const divYpos = 1 / (dy + 0.5);\r\n            const divYneg = dy === 0 ? Number.POSITIVE_INFINITY : 1 / (dy - 0.5);\r\n            let wedgeIndex = 0;\r\n            // X += Y must be written as X = X + Y, in order not to trigger deoptimization due to\r\n            // http://stackoverflow.com/questions/34595356/what-does-compound-let-const-assignment-mean\r\n            for (let dx = 0, mapIndex = yMapIndex, maskIndex = yMaskIndex,\r\n                 slopeY = -0.5 * divYpos, slopeX = 0.5 * divYneg;\r\n                 dx !== endDX && wedgeIndex !== wedges.length;\r\n                 dx ++, mapIndex = mapIndex + xDir, maskIndex = maskIndex + xDir,\r\n                 slopeY = slopeY + divYpos, slopeX = slopeX + divYneg\r\n            ) {\r\n                // the slopes of the four corners of this tile\r\n                // these are named as follows:\r\n                //   slopeY is the slope closest to the Y axis\r\n                //   slopeX is the slope closest to the X axis\r\n                // this is always true:\r\n                //   slopeY < slopeX\r\n                //\r\n                // O = origin, C = current\r\n                // +---+---+---+\r\n                // | O |   |   |\r\n                // +---+---+---X\r\n                // |   |   | C |\r\n                // +---+---Y---+\r\n\r\n                // advance the wedge index until this tile is not after the current wedge\r\n                while (slopeY >= wedges[wedgeIndex + WEDGE_HIGH]) {\r\n                    // X += Y must be written as X = X + Y, in order not to trigger deoptimization due to\r\n                    // http://stackoverflow.com/questions/34595356/what-does-compound-let-const-assignment-mean\r\n                    wedgeIndex = wedgeIndex + WEDGE_COUNT;\r\n                    if (wedgeIndex >= wedges.length) {\r\n                        break;\r\n                    }\r\n                }\r\n                if (wedgeIndex >= wedges.length) {\r\n                    break;\r\n                }\r\n\r\n                // if the current wedge is after this tile, move on\r\n                if (slopeX <= wedges[wedgeIndex + WEDGE_LOW]) {\r\n                    continue;\r\n                }\r\n\r\n                // we can see this tile\r\n                mask.setAt(maskIndex, true);\r\n\r\n                // const/let must be at the top of a block, in order not to trigger deoptimization due to\r\n                // https://github.com/nodejs/node/issues/9729\r\n                {\r\n                    const body = (dx !== 0 || dy !== 0) && this._tileFlags[mapIndex];\r\n                    if (body) {\r\n                        wedgeIndex = cutWedge(wedges, wedgeIndex,\r\n                            slopeY + BODY_EPSILON, slopeX - BODY_EPSILON);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * This function cuts a range of angles out of the wedge array.\r\n */\r\nfunction cutWedge(wedges: number[], wedgeIndex: number, low: number, high: number): number {\r\n    for (; ; ) {\r\n        if (wedgeIndex === wedges.length) {\r\n            return wedgeIndex;\r\n        }\r\n        if (low <= wedges[wedgeIndex + WEDGE_HIGH]) {\r\n            break;\r\n        }\r\n        wedgeIndex += WEDGE_COUNT;\r\n    }\r\n    if (low <= wedges[wedgeIndex + WEDGE_LOW]) {\r\n        if (high >= wedges[wedgeIndex + WEDGE_HIGH]) {\r\n            // wedge is entirely occluded, remove it\r\n            wedges.splice(wedgeIndex, WEDGE_COUNT);\r\n            // now looking at the next wedge (or past the end)\r\n            return cutWedge(wedges, wedgeIndex, low, high);\r\n        } else if (high >= wedges[wedgeIndex + WEDGE_LOW]) {\r\n            // low part of wedge is occluded, trim it\r\n            wedges[wedgeIndex + WEDGE_LOW] = high;\r\n            // still looking at the same wedge\r\n        } else {\r\n            // this cut doesn't reach the current wedge\r\n        }\r\n    } else if (high >= wedges[wedgeIndex + WEDGE_HIGH]) {\r\n        // high part of wedge is occluded, trim it\r\n        wedges[wedgeIndex + WEDGE_HIGH] = low;\r\n        // move on to the next wedge\r\n        wedgeIndex += WEDGE_COUNT;\r\n        return cutWedge(wedges, wedgeIndex, low, high);\r\n    } else {\r\n        // middle part of wedge is occluded, split it\r\n        wedges.splice(wedgeIndex, 0, wedges[wedgeIndex + WEDGE_LOW], low);\r\n        wedgeIndex += WEDGE_COUNT;\r\n        wedges[wedgeIndex + WEDGE_LOW] = high;\r\n        // now looking at the second wedge of the split\r\n    }\r\n    return wedgeIndex;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/field-of-view.ts","import * as geom from '.';\r\n\r\nconst LOCAL_OFF = new geom.Offset();\r\n\r\nexport class MaskRect implements geom.RectangleLike {\r\n    private readonly _rectangle = new geom.Rectangle();\r\n    private readonly _mask: geom.Mask;\r\n    private readonly _outsideValue: boolean;\r\n\r\n    constructor(rect: geom.RectangleLike, initialValue = false, outsideValue = false) {\r\n        this._rectangle.copyFrom(rect);\r\n        this._mask = new geom.Mask(rect, initialValue);\r\n        this._outsideValue = outsideValue;\r\n    }\r\n\r\n    // accessors\r\n\r\n    toString() {\r\n        return `${this._rectangle.northWest}/${this._outsideValue}\\n${this._mask}`;\r\n    }\r\n\r\n    get westX() {\r\n        return this._rectangle.westX;\r\n    }\r\n\r\n    get northY() {\r\n        return this._rectangle.northY;\r\n    }\r\n\r\n    get width() {\r\n        return this._rectangle.width;\r\n    }\r\n\r\n    get height() {\r\n        return this._rectangle.height;\r\n    }\r\n\r\n    index(off: geom.OffsetLike) {\r\n        return this._mask.index(LOCAL_OFF.copyFrom(off).subtractOffset(this._rectangle.northWest));\r\n    }\r\n\r\n    getAt(index: number) {\r\n        return this._mask.getAt(index);\r\n    }\r\n\r\n    get(x: number, y: number) {\r\n        LOCAL_OFF.set(x, y);\r\n        if (!this._rectangle.containsOffset(LOCAL_OFF)) {\r\n            return this._outsideValue;\r\n        }\r\n        return this._mask.get(LOCAL_OFF.subtractOffset(this._rectangle.northWest));\r\n    }\r\n    // mutators\r\n\r\n    setAt(index: number, value: boolean) {\r\n        this._mask.setAt(index, value);\r\n        return this;\r\n    }\r\n\r\n    set(off: geom.OffsetLike, value: boolean) {\r\n        this._mask.set(LOCAL_OFF.copyFrom(off).subtractOffset(this._rectangle.northWest), value);\r\n        return this;\r\n    }\r\n\r\n    // utilities\r\n\r\n    forEach(cursor: geom.Offset, callback: (cursor: geom.Offset, value: boolean) => void) {\r\n        this._mask.forEach(cursor, (off, value) => {\r\n            callback(off.addOffset(this._rectangle.northWest), value);\r\n        });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/geom/mask-rect.ts","import * as geom from '.';\r\n\r\nexport class Mask implements geom.SizeLike {\r\n    private readonly _size = new geom.Size();\r\n    private readonly _bits: boolean[];\r\n    // TODO consider Uint8Array for bits\r\n\r\n    constructor(size: geom.SizeLike, initialValue = false) {\r\n        this._size.copyFrom(size);\r\n        this._bits = new Array<boolean>(this._size.area).fill(initialValue);\r\n    }\r\n\r\n    // accessors\r\n\r\n    toString() {\r\n        let ret = '';\r\n        const off = new geom.Offset();\r\n        for (let y = 0; y < this._size.height; y ++) {\r\n            for (let x = 0; x < this._size.width; x ++) {\r\n                off.set(x, y);\r\n                ret += this.get(off.set(x, y)) ? '☑' : '☐';\r\n            }\r\n            ret += '\\n';\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    get width() {\r\n        return this._size.width;\r\n    }\r\n\r\n    get height() {\r\n        return this._size.height;\r\n    }\r\n\r\n    index(off: geom.OffsetLike) {\r\n        return this._size.index(off);\r\n    }\r\n\r\n    getAt(index: number) {\r\n        return this._bits[index];\r\n    }\r\n\r\n    get(off: geom.OffsetLike) {\r\n        return this.getAt(this.index(off));\r\n    }\r\n\r\n    // mutators\r\n\r\n    setAt(index: number, value: boolean) {\r\n        this._bits[index] = value;\r\n        return this;\r\n    }\r\n\r\n    set(off: geom.OffsetLike, value: boolean) {\r\n        return this.setAt(this.index(off), value);\r\n    }\r\n\r\n    // utilities\r\n\r\n    forEach(cursor: geom.Offset, callback: (cursor: geom.Offset, value: boolean) => void) {\r\n        let index = 0;\r\n        this._size.forEach(cursor, (off) => {\r\n            callback(off, this._bits[index]);\r\n            index ++;\r\n        });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/geom/mask.ts","export interface OffsetLike {\r\n    readonly x: number;\r\n    readonly y: number;\r\n}\r\n\r\nexport class Offset implements OffsetLike {\r\n    x: number;\r\n    y: number;\r\n\r\n    constructor();\r\n    constructor(x: number, y: number);\r\n    constructor(x?: number, y?: number) {\r\n        if (typeof x === 'undefined') {\r\n            x = 0;\r\n        }\r\n        if (typeof y === 'undefined') {\r\n            y = 0;\r\n        }\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    toString() {\r\n        return `(${this.x},${this.y})`;\r\n    }\r\n\r\n    // mutators\r\n\r\n    set(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n        return this;\r\n    }\r\n\r\n    copyFrom(other: OffsetLike) {\r\n        this.x = other.x;\r\n        this.y = other.y;\r\n        return this;\r\n    }\r\n\r\n    addOffset(off: OffsetLike) {\r\n        this.x += off.x;\r\n        this.y += off.y;\r\n        return this;\r\n    }\r\n\r\n    subtractOffset(off: OffsetLike) {\r\n        this.x -= off.x;\r\n        this.y -= off.y;\r\n        return this;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/geom/offset.ts","import * as geom from '.';\r\n\r\nexport interface RectangleLike extends geom.SizeLike {\r\n    readonly westX: number;\r\n    readonly northY: number;\r\n}\r\n\r\nconst LOCAL_OFF = new geom.Offset();\r\n\r\nexport class Rectangle implements RectangleLike, geom.SizeLike {\r\n    northWest: geom.Offset;\r\n    size: geom.Size;\r\n\r\n    constructor();\r\n    constructor(westX: number, northY: number, width: number, height: number);\r\n    constructor(westX?: number, northY?: number, width?: number, height?: number) {\r\n        if (typeof westX === 'undefined') {\r\n            westX = 0;\r\n        }\r\n        if (typeof northY === 'undefined') {\r\n            northY = 0;\r\n        }\r\n        if (typeof width === 'undefined') {\r\n            width = 0;\r\n        }\r\n        if (typeof height === 'undefined') {\r\n            height = 0;\r\n        }\r\n        this.northWest = new geom.Offset(westX, northY);\r\n        this.size = new geom.Size(width, height);\r\n    }\r\n\r\n    // accessors\r\n\r\n    toString() {\r\n        return `(${this.westX},${this.northY} ${this.width}x${this.height})`;\r\n    }\r\n\r\n    get northY() {\r\n        return this.northWest.y;\r\n    }\r\n\r\n    get southY() {\r\n        return this.northWest.y + this.size.height - 1;\r\n    }\r\n\r\n    get westX() {\r\n        return this.northWest.x;\r\n    }\r\n\r\n    get eastX() {\r\n        return this.northWest.x + this.size.width - 1;\r\n    }\r\n\r\n    get width() {\r\n        return this.size.width;\r\n    }\r\n\r\n    get height() {\r\n        return this.size.height;\r\n    }\r\n\r\n    get empty() {\r\n        return this.size.empty;\r\n    }\r\n\r\n    get area() {\r\n        return this.size.area;\r\n    }\r\n\r\n    // mutators\r\n\r\n    copyFrom(other: RectangleLike) {\r\n        this.northWest.set(other.westX, other.northY);\r\n        this.size.set(other.width, other.height);\r\n        return this;\r\n    }\r\n\r\n    // utilities\r\n\r\n    containsOffset(off: geom.OffsetLike) {\r\n        return this.size.containsOffset(LOCAL_OFF.copyFrom(off).subtractOffset(this.northWest));\r\n    }\r\n\r\n    index(off: geom.OffsetLike) {\r\n        return this.size.index(LOCAL_OFF.copyFrom(off).subtractOffset(this.northWest));\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/geom/rectangle.ts","import * as geom from '.';\r\n\r\nexport interface SizeLike {\r\n    readonly width: number;\r\n    readonly height: number;\r\n}\r\n\r\nexport class Size implements SizeLike {\r\n    width: number;\r\n    height: number;\r\n\r\n    constructor();\r\n    constructor(width: number, height: number);\r\n    constructor(width?: number, height?: number) {\r\n        if (typeof width === 'undefined') {\r\n            width = 0;\r\n        }\r\n        if (typeof height === 'undefined') {\r\n            height = 0;\r\n        }\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    // accessors\r\n\r\n    toString() {\r\n        return `(${this.width}x${this.height})`;\r\n    }\r\n\r\n    get empty() {\r\n        return this.width === 0 || this.height === 0;\r\n    }\r\n\r\n    get area() {\r\n        return this.width * this.height;\r\n    }\r\n\r\n    // mutators\r\n\r\n    set(width: number, height: number) {\r\n        this.width = width;\r\n        this.height = height;\r\n        return this;\r\n    }\r\n\r\n    copyFrom(other: SizeLike) {\r\n        this.width = other.width;\r\n        this.height = other.height;\r\n        return this;\r\n    }\r\n\r\n    // utilities\r\n\r\n    containsOffset(off: geom.OffsetLike) {\r\n        return off.x >= 0 && off.y >= 0 && off.x < this.width && off.y < this.height;\r\n    }\r\n\r\n    index(off: geom.OffsetLike) {\r\n        return off.y * this.width + off.x;\r\n    }\r\n\r\n    forEach(cursor: geom.Offset, callback: (offset: geom.Offset) => void) {\r\n        for (let dy = 0; dy < this.height; dy ++) {\r\n            for (let dx = 0; dx < this.width; dx ++) {\r\n                cursor.x = dx;\r\n                cursor.y = dy;\r\n                callback(cursor);\r\n            }\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/geom/size.ts","/*\r\n *  TheField\r\n *  github.com/sbj42/the-field\r\n *  James Clark\r\n *  Licensed under the MIT license.\r\n */\r\n\r\nexport {FieldOfViewMap} from './field-of-view';\r\nexport {MaskRect} from './geom';\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts"],"sourceRoot":""}